// este codigo es para agregar un control de velocidad
#include <ESP8266WiFi.h>

const char* ssid = "PanchoWifi";
const char* password = "12345";
WiFiServer server(80);

// Configuración del puente H
const int PWMA = 15;
const int AIN1 = 14;
const int AIN2 = 12;
const int PWMB = 13;
const int BIN1 = 4;
const int BIN2 = 5;
const int STBY = 0;

int PinLED = 2;                           //Definimos el pin de salida - GPIO2 / D4
int estado = HIGH;

int speedA = 0;  // Velocidad del motor A (0-255)
int speedB = 0;  // Velocidad del motor B (0-255)
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  delay(10);
  pinMode(PinLED, OUTPUT);        //Inicializamos el GPIO2 como salida
  digitalWrite(PinLED, HIGH);

  server.begin();                         //inicializamos el servidor
  WiFi.mode(WIFI_AP);                     // Definimos el modo del WiFi como Access Point
  // WiFi.softAP(ssid, password);            //Red con clave, en el canal 1 y visible

  //WiFi.softAP(ssid, password,3,1);      //Otra opción: Red con clave, en el canal 3 y visible
  WiFi.softAP(ssid);                    //Otra opción: Red abierta

  Serial.println();                       // Enviamos un salto de línea en el monitor serial

  Serial.print("Direccion IP Access Point - por defecto: ");      //Imprime la dirección IP en el monitor serial
  Serial.println(WiFi.softAPIP());
  Serial.print("Direccion MAC Access Point: ");                   //Imprime la dirección MAC en el monitor serial
  Serial.println(WiFi.softAPmacAddress());

  //IPAddress local_ip(192, 168, 1, 1);                           //Modifica la dirección IP
  //IPAddress gateway(192, 168, 1, 1);
  //IPAddress subnet(255, 255, 255, 0);
  //WiFi.softAPConfig(local_ip, gateway, subnet);
  //Serial.println();
  //Serial.print("Access Point - Nueva direccion IP: ");
  //Serial.println(WiFi.softAPIP());


  // Inicializar el puente H
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(PWMA, OUTPUT);
  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);
  pinMode(PWMB, OUTPUT);
  pinMode(STBY, OUTPUT);

  digitalWrite(STBY, HIGH);


}

void loop() {
  // put your main code here, to run repeatedly:

  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }

  // Wait until the client sends some data
  Serial.println("new client");
  while (!client.available()) {
    delay(1);
  }

  String peticion = client.readStringUntil('\r');
  Serial.println(peticion);
  client.flush();

  // Comprueba la petición
  if (peticion.indexOf("/on") != -1) {
    estado = LOW;
  }
  if (peticion.indexOf("/off") != -1) {
    estado = HIGH;
  }

  //Enciende o apaga el LED en función de la petición
  if (estado == LOW) {
    digitalWrite(PinLED, LOW);
  }
  else {
    digitalWrite(PinLED, HIGH);
  }



  // Interpretar la petición y controlar el puente H
  if (peticion.indexOf("/Izquierda") != -1) {
    digitalWrite(AIN1, HIGH);
    digitalWrite(AIN2, LOW);
    analogWrite(PWMA, speedA);

    digitalWrite(BIN1, HIGH);
    digitalWrite(BIN2, LOW);
    analogWrite(PWMB, speedB);

    delay(100);
  } else if (peticion.indexOf("/Derecha") != -1) {
    digitalWrite(AIN1, LOW);
    digitalWrite(AIN2, HIGH);
    analogWrite(PWMA, speedA);

    digitalWrite(BIN1, LOW);
    digitalWrite(BIN2, HIGH);
    analogWrite(PWMB, speedB);

    delay(100);
  } else if (peticion.indexOf("/Atras") != -1) {
    digitalWrite(AIN1, HIGH);
    digitalWrite(AIN2, LOW);
    analogWrite(PWMA, speedA);
    digitalWrite(BIN1, LOW);
    digitalWrite(BIN2, HIGH);
    analogWrite(PWMB, speedB);

    delay(300);
  } else if (peticion.indexOf("/Adelante") != -1) {
    digitalWrite(AIN1, LOW);
    digitalWrite(AIN2, HIGH);
    analogWrite(PWMA, speedA);
    digitalWrite(BIN1, HIGH);
    digitalWrite(BIN2, LOW);
    analogWrite(PWMB, speedB);

    delay(200);
     } else if (peticion.indexOf("/Detener") != -1) {
    digitalWrite(AIN1, LOW);
    digitalWrite(AIN2, LOW);
    analogWrite(PWMA, LOW);
    digitalWrite(BIN1, LOW);
    digitalWrite(BIN2, LOW);
    analogWrite(PWMB, LOW);

    delay(200);
  }
  else if (peticion.indexOf("/speed") != -1) {
    // Obtenerel valor de velocidad del parámetro en la petición
int index = peticion.indexOf("/speed/");
if (index != -1) {
String speedValue = peticion.substring(index + 7); // Extraer el valor de velocidad de la petición
int newSpeed = speedValue.toInt(); // Convertir el valor de velocidad a entero

  // Asegurarse de que la velocidad esté en el rango válido (0-255)
  if (newSpeed >= 0 && newSpeed <= 255) {
    speedA = newSpeed;
    speedB = newSpeed;
  }
}

// Enviar una respuesta con el estado actual de las velocidades de los motores
String response = "Motor A Speed: " + String(speedA) + "<br>";
response += "Motor B Speed: " + String(speedB) + "<br>";
client.println(response);



}


  // Detener el movimiento del puente H
  digitalWrite(PWMA, LOW);
  digitalWrite(AIN1, LOW);
  digitalWrite(AIN2, LOW);

  digitalWrite(PWMB, LOW);
  digitalWrite(BIN1, LOW);
  digitalWrite(BIN2, LOW);

  // Esperar un segundo antes de enviar la respuesta
  delay(100);

  Serial.println("Client disonnected");

}
